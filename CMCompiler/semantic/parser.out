Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    ANNOTATION

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     var_declaration -> type_specifier ID ;
Rule 7     var_declaration -> type_specifier ID [ NUM ] ;
Rule 8     type_specifier -> INT
Rule 9     type_specifier -> VOID
Rule 10    fun_declaration -> type_specifier ID ( params ) compound_stmt
Rule 11    params -> param_list
Rule 12    params -> VOID
Rule 13    params -> <empty>
Rule 14    param_list -> param_list , param
Rule 15    param_list -> param
Rule 16    param -> type_specifier ID
Rule 17    param -> type_specifier ID [ ]
Rule 18    compound_stmt -> { local_declarations statement_list }
Rule 19    local_declarations -> local_declarations var_declaration
Rule 20    local_declarations -> <empty>
Rule 21    statement_list -> statement_list statement
Rule 22    statement_list -> <empty>
Rule 23    statement -> expression_stmt
Rule 24    statement -> compound_stmt
Rule 25    statement -> selection_stmt
Rule 26    statement -> iteration_stmt
Rule 27    statement -> return_stmt
Rule 28    expression_stmt -> expression ;
Rule 29    expression_stmt -> ;
Rule 30    selection_stmt -> IF ( expression ) M statement N
Rule 31    selection_stmt -> IF ( expression ) M statement N ELSE M statement M
Rule 32    M -> <empty>
Rule 33    N -> <empty>
Rule 34    iteration_stmt -> WHILE M ( expression ) M statement M
Rule 35    return_stmt -> RETURN ;
Rule 36    return_stmt -> RETURN expression ;
Rule 37    expression -> var = expression
Rule 38    expression -> simple_expression
Rule 39    var -> ID
Rule 40    var -> ID [ expression ]
Rule 41    simple_expression -> additive_expression relop additive_expression
Rule 42    simple_expression -> additive_expression
Rule 43    relop -> LE
Rule 44    relop -> <
Rule 45    relop -> >
Rule 46    relop -> GE
Rule 47    relop -> EE
Rule 48    relop -> NE
Rule 49    additive_expression -> additive_expression addop term
Rule 50    additive_expression -> term
Rule 51    addop -> +
Rule 52    addop -> -
Rule 53    term -> term mulop factor
Rule 54    term -> factor
Rule 55    mulop -> *
Rule 56    mulop -> /
Rule 57    factor -> ( expression )
Rule 58    factor -> var
Rule 59    factor -> call
Rule 60    factor -> NUM
Rule 61    call -> ID ( args )
Rule 62    args -> arg_list
Rule 63    args -> <empty>
Rule 64    arg_list -> arg_list , expression
Rule 65    arg_list -> expression

Terminals, with rules where they appear

(                    : 10 30 31 34 57 61
)                    : 10 30 31 34 57 61
*                    : 55
+                    : 51
,                    : 14 64
-                    : 52
/                    : 56
;                    : 6 7 28 29 35 36
<                    : 44
=                    : 37
>                    : 45
ANNOTATION           : 
EE                   : 47
ELSE                 : 31
GE                   : 46
ID                   : 6 7 10 16 17 39 40 61
IF                   : 30 31
INT                  : 8
LE                   : 43
NE                   : 48
NUM                  : 7 60
RETURN               : 35 36
VOID                 : 9 12
WHILE                : 34
[                    : 7 17 40
]                    : 7 17 40
error                : 
{                    : 18
}                    : 18

Nonterminals, with rules where they appear

M                    : 30 31 31 31 34 34 34
N                    : 30 31
additive_expression  : 41 41 42 49
addop                : 49
arg_list             : 62 64
args                 : 61
call                 : 59
compound_stmt        : 10 24
declaration          : 2 3
declaration_list     : 1 2
expression           : 28 30 31 34 36 37 40 57 64 65
expression_stmt      : 23
factor               : 53 54
fun_declaration      : 5
iteration_stmt       : 26
local_declarations   : 18 19
mulop                : 53
param                : 14 15
param_list           : 11 14
params               : 10
program              : 0
relop                : 41
return_stmt          : 27
selection_stmt       : 25
simple_expression    : 38
statement            : 21 30 31 31 34
statement_list       : 18 21
term                 : 49 50 53
type_specifier       : 6 7 10 16 17
var                  : 37 58
var_declaration      : 4 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID ;
    (7) var_declaration -> . type_specifier ID [ NUM ] ;
    (10) fun_declaration -> . type_specifier ID ( params ) compound_stmt
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    INT             shift and go to state 7
    VOID            shift and go to state 8

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    var_declaration                shift and go to state 4
    fun_declaration                shift and go to state 5
    type_specifier                 shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID ;
    (7) var_declaration -> . type_specifier ID [ NUM ] ;
    (10) fun_declaration -> . type_specifier ID ( params ) compound_stmt
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    $end            reduce using rule 1 (program -> declaration_list .)
    INT             shift and go to state 7
    VOID            shift and go to state 8

    declaration                    shift and go to state 9
    var_declaration                shift and go to state 4
    fun_declaration                shift and go to state 5
    type_specifier                 shift and go to state 6

state 3

    (3) declaration_list -> declaration .

    INT             reduce using rule 3 (declaration_list -> declaration .)
    VOID            reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 4

    (4) declaration -> var_declaration .

    INT             reduce using rule 4 (declaration -> var_declaration .)
    VOID            reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 5

    (5) declaration -> fun_declaration .

    INT             reduce using rule 5 (declaration -> fun_declaration .)
    VOID            reduce using rule 5 (declaration -> fun_declaration .)
    $end            reduce using rule 5 (declaration -> fun_declaration .)


state 6

    (6) var_declaration -> type_specifier . ID ;
    (7) var_declaration -> type_specifier . ID [ NUM ] ;
    (10) fun_declaration -> type_specifier . ID ( params ) compound_stmt

    ID              shift and go to state 10


state 7

    (8) type_specifier -> INT .

    ID              reduce using rule 8 (type_specifier -> INT .)


state 8

    (9) type_specifier -> VOID .

    ID              reduce using rule 9 (type_specifier -> VOID .)


state 9

    (2) declaration_list -> declaration_list declaration .

    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 10

    (6) var_declaration -> type_specifier ID . ;
    (7) var_declaration -> type_specifier ID . [ NUM ] ;
    (10) fun_declaration -> type_specifier ID . ( params ) compound_stmt

    ;               shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 13


state 11

    (6) var_declaration -> type_specifier ID ; .

    INT             reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    VOID            reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    $end            reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    }               reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    ;               reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    {               reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    IF              reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    WHILE           reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    RETURN          reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    ID              reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    (               reduce using rule 6 (var_declaration -> type_specifier ID ; .)
    NUM             reduce using rule 6 (var_declaration -> type_specifier ID ; .)


state 12

    (7) var_declaration -> type_specifier ID [ . NUM ] ;

    NUM             shift and go to state 14


state 13

    (10) fun_declaration -> type_specifier ID ( . params ) compound_stmt
    (11) params -> . param_list
    (12) params -> . VOID
    (13) params -> .
    (14) param_list -> . param_list , param
    (15) param_list -> . param
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID [ ]
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    VOID            shift and go to state 18
    )               reduce using rule 13 (params -> .)
    INT             shift and go to state 7

    type_specifier                 shift and go to state 15
    params                         shift and go to state 16
    param_list                     shift and go to state 17
    param                          shift and go to state 19

state 14

    (7) var_declaration -> type_specifier ID [ NUM . ] ;

    ]               shift and go to state 20


state 15

    (16) param -> type_specifier . ID
    (17) param -> type_specifier . ID [ ]

    ID              shift and go to state 21


state 16

    (10) fun_declaration -> type_specifier ID ( params . ) compound_stmt

    )               shift and go to state 22


state 17

    (11) params -> param_list .
    (14) param_list -> param_list . , param

    )               reduce using rule 11 (params -> param_list .)
    ,               shift and go to state 23


state 18

    (12) params -> VOID .
    (9) type_specifier -> VOID .

    )               reduce using rule 12 (params -> VOID .)
    ID              reduce using rule 9 (type_specifier -> VOID .)


state 19

    (15) param_list -> param .

    ,               reduce using rule 15 (param_list -> param .)
    )               reduce using rule 15 (param_list -> param .)


state 20

    (7) var_declaration -> type_specifier ID [ NUM ] . ;

    ;               shift and go to state 24


state 21

    (16) param -> type_specifier ID .
    (17) param -> type_specifier ID . [ ]

    ,               reduce using rule 16 (param -> type_specifier ID .)
    )               reduce using rule 16 (param -> type_specifier ID .)
    [               shift and go to state 25


state 22

    (10) fun_declaration -> type_specifier ID ( params ) . compound_stmt
    (18) compound_stmt -> . { local_declarations statement_list }

    {               shift and go to state 27

    compound_stmt                  shift and go to state 26

state 23

    (14) param_list -> param_list , . param
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID [ ]
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    INT             shift and go to state 7
    VOID            shift and go to state 8

    param                          shift and go to state 28
    type_specifier                 shift and go to state 15

state 24

    (7) var_declaration -> type_specifier ID [ NUM ] ; .

    INT             reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    VOID            reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    $end            reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    }               reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    ;               reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    {               reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    IF              reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    WHILE           reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    RETURN          reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    ID              reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    (               reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)
    NUM             reduce using rule 7 (var_declaration -> type_specifier ID [ NUM ] ; .)


state 25

    (17) param -> type_specifier ID [ . ]

    ]               shift and go to state 29


state 26

    (10) fun_declaration -> type_specifier ID ( params ) compound_stmt .

    INT             reduce using rule 10 (fun_declaration -> type_specifier ID ( params ) compound_stmt .)
    VOID            reduce using rule 10 (fun_declaration -> type_specifier ID ( params ) compound_stmt .)
    $end            reduce using rule 10 (fun_declaration -> type_specifier ID ( params ) compound_stmt .)


state 27

    (18) compound_stmt -> { . local_declarations statement_list }
    (19) local_declarations -> . local_declarations var_declaration
    (20) local_declarations -> .

    INT             reduce using rule 20 (local_declarations -> .)
    VOID            reduce using rule 20 (local_declarations -> .)
    }               reduce using rule 20 (local_declarations -> .)
    ;               reduce using rule 20 (local_declarations -> .)
    {               reduce using rule 20 (local_declarations -> .)
    IF              reduce using rule 20 (local_declarations -> .)
    WHILE           reduce using rule 20 (local_declarations -> .)
    RETURN          reduce using rule 20 (local_declarations -> .)
    ID              reduce using rule 20 (local_declarations -> .)
    (               reduce using rule 20 (local_declarations -> .)
    NUM             reduce using rule 20 (local_declarations -> .)

    local_declarations             shift and go to state 30

state 28

    (14) param_list -> param_list , param .

    ,               reduce using rule 14 (param_list -> param_list , param .)
    )               reduce using rule 14 (param_list -> param_list , param .)


state 29

    (17) param -> type_specifier ID [ ] .

    ,               reduce using rule 17 (param -> type_specifier ID [ ] .)
    )               reduce using rule 17 (param -> type_specifier ID [ ] .)


state 30

    (18) compound_stmt -> { local_declarations . statement_list }
    (19) local_declarations -> local_declarations . var_declaration
    (21) statement_list -> . statement_list statement
    (22) statement_list -> .
    (6) var_declaration -> . type_specifier ID ;
    (7) var_declaration -> . type_specifier ID [ NUM ] ;
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    }               reduce using rule 22 (statement_list -> .)
    ;               reduce using rule 22 (statement_list -> .)
    {               reduce using rule 22 (statement_list -> .)
    IF              reduce using rule 22 (statement_list -> .)
    WHILE           reduce using rule 22 (statement_list -> .)
    RETURN          reduce using rule 22 (statement_list -> .)
    ID              reduce using rule 22 (statement_list -> .)
    (               reduce using rule 22 (statement_list -> .)
    NUM             reduce using rule 22 (statement_list -> .)
    INT             shift and go to state 7
    VOID            shift and go to state 8

    statement_list                 shift and go to state 31
    var_declaration                shift and go to state 32
    type_specifier                 shift and go to state 33

state 31

    (18) compound_stmt -> { local_declarations statement_list . }
    (21) statement_list -> statement_list . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression ;
    (29) expression_stmt -> . ;
    (18) compound_stmt -> . { local_declarations statement_list }
    (30) selection_stmt -> . IF ( expression ) M statement N
    (31) selection_stmt -> . IF ( expression ) M statement N ELSE M statement M
    (34) iteration_stmt -> . WHILE M ( expression ) M statement M
    (35) return_stmt -> . RETURN ;
    (36) return_stmt -> . RETURN expression ;
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    }               shift and go to state 34
    ;               shift and go to state 42
    {               shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 46
    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    statement                      shift and go to state 35
    expression_stmt                shift and go to state 36
    compound_stmt                  shift and go to state 37
    selection_stmt                 shift and go to state 38
    iteration_stmt                 shift and go to state 39
    return_stmt                    shift and go to state 40
    expression                     shift and go to state 41
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 32

    (19) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    VOID            reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    }               reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    ;               reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    {               reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    (               reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    NUM             reduce using rule 19 (local_declarations -> local_declarations var_declaration .)


state 33

    (6) var_declaration -> type_specifier . ID ;
    (7) var_declaration -> type_specifier . ID [ NUM ] ;

    ID              shift and go to state 55


state 34

    (18) compound_stmt -> { local_declarations statement_list } .

    INT             reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    VOID            reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    $end            reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    }               reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    ;               reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    {               reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    IF              reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    WHILE           reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    RETURN          reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    ID              reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    (               reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    NUM             reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)
    ELSE            reduce using rule 18 (compound_stmt -> { local_declarations statement_list } .)


state 35

    (21) statement_list -> statement_list statement .

    }               reduce using rule 21 (statement_list -> statement_list statement .)
    ;               reduce using rule 21 (statement_list -> statement_list statement .)
    {               reduce using rule 21 (statement_list -> statement_list statement .)
    IF              reduce using rule 21 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 21 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 21 (statement_list -> statement_list statement .)
    ID              reduce using rule 21 (statement_list -> statement_list statement .)
    (               reduce using rule 21 (statement_list -> statement_list statement .)
    NUM             reduce using rule 21 (statement_list -> statement_list statement .)


state 36

    (23) statement -> expression_stmt .

    }               reduce using rule 23 (statement -> expression_stmt .)
    ;               reduce using rule 23 (statement -> expression_stmt .)
    {               reduce using rule 23 (statement -> expression_stmt .)
    IF              reduce using rule 23 (statement -> expression_stmt .)
    WHILE           reduce using rule 23 (statement -> expression_stmt .)
    RETURN          reduce using rule 23 (statement -> expression_stmt .)
    ID              reduce using rule 23 (statement -> expression_stmt .)
    (               reduce using rule 23 (statement -> expression_stmt .)
    NUM             reduce using rule 23 (statement -> expression_stmt .)
    ELSE            reduce using rule 23 (statement -> expression_stmt .)


state 37

    (24) statement -> compound_stmt .

    }               reduce using rule 24 (statement -> compound_stmt .)
    ;               reduce using rule 24 (statement -> compound_stmt .)
    {               reduce using rule 24 (statement -> compound_stmt .)
    IF              reduce using rule 24 (statement -> compound_stmt .)
    WHILE           reduce using rule 24 (statement -> compound_stmt .)
    RETURN          reduce using rule 24 (statement -> compound_stmt .)
    ID              reduce using rule 24 (statement -> compound_stmt .)
    (               reduce using rule 24 (statement -> compound_stmt .)
    NUM             reduce using rule 24 (statement -> compound_stmt .)
    ELSE            reduce using rule 24 (statement -> compound_stmt .)


state 38

    (25) statement -> selection_stmt .

    }               reduce using rule 25 (statement -> selection_stmt .)
    ;               reduce using rule 25 (statement -> selection_stmt .)
    {               reduce using rule 25 (statement -> selection_stmt .)
    IF              reduce using rule 25 (statement -> selection_stmt .)
    WHILE           reduce using rule 25 (statement -> selection_stmt .)
    RETURN          reduce using rule 25 (statement -> selection_stmt .)
    ID              reduce using rule 25 (statement -> selection_stmt .)
    (               reduce using rule 25 (statement -> selection_stmt .)
    NUM             reduce using rule 25 (statement -> selection_stmt .)
    ELSE            reduce using rule 25 (statement -> selection_stmt .)


state 39

    (26) statement -> iteration_stmt .

    }               reduce using rule 26 (statement -> iteration_stmt .)
    ;               reduce using rule 26 (statement -> iteration_stmt .)
    {               reduce using rule 26 (statement -> iteration_stmt .)
    IF              reduce using rule 26 (statement -> iteration_stmt .)
    WHILE           reduce using rule 26 (statement -> iteration_stmt .)
    RETURN          reduce using rule 26 (statement -> iteration_stmt .)
    ID              reduce using rule 26 (statement -> iteration_stmt .)
    (               reduce using rule 26 (statement -> iteration_stmt .)
    NUM             reduce using rule 26 (statement -> iteration_stmt .)
    ELSE            reduce using rule 26 (statement -> iteration_stmt .)


state 40

    (27) statement -> return_stmt .

    }               reduce using rule 27 (statement -> return_stmt .)
    ;               reduce using rule 27 (statement -> return_stmt .)
    {               reduce using rule 27 (statement -> return_stmt .)
    IF              reduce using rule 27 (statement -> return_stmt .)
    WHILE           reduce using rule 27 (statement -> return_stmt .)
    RETURN          reduce using rule 27 (statement -> return_stmt .)
    ID              reduce using rule 27 (statement -> return_stmt .)
    (               reduce using rule 27 (statement -> return_stmt .)
    NUM             reduce using rule 27 (statement -> return_stmt .)
    ELSE            reduce using rule 27 (statement -> return_stmt .)


state 41

    (28) expression_stmt -> expression . ;

    ;               shift and go to state 56


state 42

    (29) expression_stmt -> ; .

    }               reduce using rule 29 (expression_stmt -> ; .)
    ;               reduce using rule 29 (expression_stmt -> ; .)
    {               reduce using rule 29 (expression_stmt -> ; .)
    IF              reduce using rule 29 (expression_stmt -> ; .)
    WHILE           reduce using rule 29 (expression_stmt -> ; .)
    RETURN          reduce using rule 29 (expression_stmt -> ; .)
    ID              reduce using rule 29 (expression_stmt -> ; .)
    (               reduce using rule 29 (expression_stmt -> ; .)
    NUM             reduce using rule 29 (expression_stmt -> ; .)
    ELSE            reduce using rule 29 (expression_stmt -> ; .)


state 43

    (30) selection_stmt -> IF . ( expression ) M statement N
    (31) selection_stmt -> IF . ( expression ) M statement N ELSE M statement M

    (               shift and go to state 57


state 44

    (57) factor -> ( . expression )
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 58
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 45

    (34) iteration_stmt -> WHILE . M ( expression ) M statement M
    (32) M -> .

    (               reduce using rule 32 (M -> .)

    M                              shift and go to state 59

state 46

    (35) return_stmt -> RETURN . ;
    (36) return_stmt -> RETURN . expression ;
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ;               shift and go to state 60
    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 61
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 47

    (37) expression -> var . = expression
    (58) factor -> var .

    =               shift and go to state 62
    *               reduce using rule 58 (factor -> var .)
    /               reduce using rule 58 (factor -> var .)
    LE              reduce using rule 58 (factor -> var .)
    <               reduce using rule 58 (factor -> var .)
    >               reduce using rule 58 (factor -> var .)
    GE              reduce using rule 58 (factor -> var .)
    EE              reduce using rule 58 (factor -> var .)
    NE              reduce using rule 58 (factor -> var .)
    +               reduce using rule 58 (factor -> var .)
    -               reduce using rule 58 (factor -> var .)
    ;               reduce using rule 58 (factor -> var .)
    )               reduce using rule 58 (factor -> var .)
    ]               reduce using rule 58 (factor -> var .)
    ,               reduce using rule 58 (factor -> var .)


state 48

    (38) expression -> simple_expression .

    ;               reduce using rule 38 (expression -> simple_expression .)
    )               reduce using rule 38 (expression -> simple_expression .)
    ]               reduce using rule 38 (expression -> simple_expression .)
    ,               reduce using rule 38 (expression -> simple_expression .)


state 49

    (39) var -> ID .
    (40) var -> ID . [ expression ]
    (61) call -> ID . ( args )

    =               reduce using rule 39 (var -> ID .)
    *               reduce using rule 39 (var -> ID .)
    /               reduce using rule 39 (var -> ID .)
    LE              reduce using rule 39 (var -> ID .)
    <               reduce using rule 39 (var -> ID .)
    >               reduce using rule 39 (var -> ID .)
    GE              reduce using rule 39 (var -> ID .)
    EE              reduce using rule 39 (var -> ID .)
    NE              reduce using rule 39 (var -> ID .)
    +               reduce using rule 39 (var -> ID .)
    -               reduce using rule 39 (var -> ID .)
    ;               reduce using rule 39 (var -> ID .)
    )               reduce using rule 39 (var -> ID .)
    ]               reduce using rule 39 (var -> ID .)
    ,               reduce using rule 39 (var -> ID .)
    [               shift and go to state 63
    (               shift and go to state 64


state 50

    (41) simple_expression -> additive_expression . relop additive_expression
    (42) simple_expression -> additive_expression .
    (49) additive_expression -> additive_expression . addop term
    (43) relop -> . LE
    (44) relop -> . <
    (45) relop -> . >
    (46) relop -> . GE
    (47) relop -> . EE
    (48) relop -> . NE
    (51) addop -> . +
    (52) addop -> . -

    ;               reduce using rule 42 (simple_expression -> additive_expression .)
    )               reduce using rule 42 (simple_expression -> additive_expression .)
    ]               reduce using rule 42 (simple_expression -> additive_expression .)
    ,               reduce using rule 42 (simple_expression -> additive_expression .)
    LE              shift and go to state 67
    <               shift and go to state 68
    >               shift and go to state 69
    GE              shift and go to state 70
    EE              shift and go to state 71
    NE              shift and go to state 72
    +               shift and go to state 73
    -               shift and go to state 74

    relop                          shift and go to state 65
    addop                          shift and go to state 66

state 51

    (50) additive_expression -> term .
    (53) term -> term . mulop factor
    (55) mulop -> . *
    (56) mulop -> . /

    LE              reduce using rule 50 (additive_expression -> term .)
    <               reduce using rule 50 (additive_expression -> term .)
    >               reduce using rule 50 (additive_expression -> term .)
    GE              reduce using rule 50 (additive_expression -> term .)
    EE              reduce using rule 50 (additive_expression -> term .)
    NE              reduce using rule 50 (additive_expression -> term .)
    +               reduce using rule 50 (additive_expression -> term .)
    -               reduce using rule 50 (additive_expression -> term .)
    ;               reduce using rule 50 (additive_expression -> term .)
    )               reduce using rule 50 (additive_expression -> term .)
    ]               reduce using rule 50 (additive_expression -> term .)
    ,               reduce using rule 50 (additive_expression -> term .)
    *               shift and go to state 76
    /               shift and go to state 77

    mulop                          shift and go to state 75

state 52

    (54) term -> factor .

    *               reduce using rule 54 (term -> factor .)
    /               reduce using rule 54 (term -> factor .)
    LE              reduce using rule 54 (term -> factor .)
    <               reduce using rule 54 (term -> factor .)
    >               reduce using rule 54 (term -> factor .)
    GE              reduce using rule 54 (term -> factor .)
    EE              reduce using rule 54 (term -> factor .)
    NE              reduce using rule 54 (term -> factor .)
    +               reduce using rule 54 (term -> factor .)
    -               reduce using rule 54 (term -> factor .)
    ;               reduce using rule 54 (term -> factor .)
    )               reduce using rule 54 (term -> factor .)
    ]               reduce using rule 54 (term -> factor .)
    ,               reduce using rule 54 (term -> factor .)


state 53

    (59) factor -> call .

    *               reduce using rule 59 (factor -> call .)
    /               reduce using rule 59 (factor -> call .)
    LE              reduce using rule 59 (factor -> call .)
    <               reduce using rule 59 (factor -> call .)
    >               reduce using rule 59 (factor -> call .)
    GE              reduce using rule 59 (factor -> call .)
    EE              reduce using rule 59 (factor -> call .)
    NE              reduce using rule 59 (factor -> call .)
    +               reduce using rule 59 (factor -> call .)
    -               reduce using rule 59 (factor -> call .)
    ;               reduce using rule 59 (factor -> call .)
    )               reduce using rule 59 (factor -> call .)
    ]               reduce using rule 59 (factor -> call .)
    ,               reduce using rule 59 (factor -> call .)


state 54

    (60) factor -> NUM .

    *               reduce using rule 60 (factor -> NUM .)
    /               reduce using rule 60 (factor -> NUM .)
    LE              reduce using rule 60 (factor -> NUM .)
    <               reduce using rule 60 (factor -> NUM .)
    >               reduce using rule 60 (factor -> NUM .)
    GE              reduce using rule 60 (factor -> NUM .)
    EE              reduce using rule 60 (factor -> NUM .)
    NE              reduce using rule 60 (factor -> NUM .)
    +               reduce using rule 60 (factor -> NUM .)
    -               reduce using rule 60 (factor -> NUM .)
    ;               reduce using rule 60 (factor -> NUM .)
    )               reduce using rule 60 (factor -> NUM .)
    ]               reduce using rule 60 (factor -> NUM .)
    ,               reduce using rule 60 (factor -> NUM .)


state 55

    (6) var_declaration -> type_specifier ID . ;
    (7) var_declaration -> type_specifier ID . [ NUM ] ;

    ;               shift and go to state 11
    [               shift and go to state 12


state 56

    (28) expression_stmt -> expression ; .

    }               reduce using rule 28 (expression_stmt -> expression ; .)
    ;               reduce using rule 28 (expression_stmt -> expression ; .)
    {               reduce using rule 28 (expression_stmt -> expression ; .)
    IF              reduce using rule 28 (expression_stmt -> expression ; .)
    WHILE           reduce using rule 28 (expression_stmt -> expression ; .)
    RETURN          reduce using rule 28 (expression_stmt -> expression ; .)
    ID              reduce using rule 28 (expression_stmt -> expression ; .)
    (               reduce using rule 28 (expression_stmt -> expression ; .)
    NUM             reduce using rule 28 (expression_stmt -> expression ; .)
    ELSE            reduce using rule 28 (expression_stmt -> expression ; .)


state 57

    (30) selection_stmt -> IF ( . expression ) M statement N
    (31) selection_stmt -> IF ( . expression ) M statement N ELSE M statement M
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 78
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 58

    (57) factor -> ( expression . )

    )               shift and go to state 79


state 59

    (34) iteration_stmt -> WHILE M . ( expression ) M statement M

    (               shift and go to state 80


state 60

    (35) return_stmt -> RETURN ; .

    }               reduce using rule 35 (return_stmt -> RETURN ; .)
    ;               reduce using rule 35 (return_stmt -> RETURN ; .)
    {               reduce using rule 35 (return_stmt -> RETURN ; .)
    IF              reduce using rule 35 (return_stmt -> RETURN ; .)
    WHILE           reduce using rule 35 (return_stmt -> RETURN ; .)
    RETURN          reduce using rule 35 (return_stmt -> RETURN ; .)
    ID              reduce using rule 35 (return_stmt -> RETURN ; .)
    (               reduce using rule 35 (return_stmt -> RETURN ; .)
    NUM             reduce using rule 35 (return_stmt -> RETURN ; .)
    ELSE            reduce using rule 35 (return_stmt -> RETURN ; .)


state 61

    (36) return_stmt -> RETURN expression . ;

    ;               shift and go to state 81


state 62

    (37) expression -> var = . expression
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    var                            shift and go to state 47
    expression                     shift and go to state 82
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 63

    (40) var -> ID [ . expression ]
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 83
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 64

    (61) call -> ID ( . args )
    (62) args -> . arg_list
    (63) args -> .
    (64) arg_list -> . arg_list , expression
    (65) arg_list -> . expression
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    )               reduce using rule 63 (args -> .)
    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    args                           shift and go to state 84
    arg_list                       shift and go to state 85
    expression                     shift and go to state 86
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 65

    (41) simple_expression -> additive_expression relop . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (61) call -> . ID ( args )

    (               shift and go to state 44
    NUM             shift and go to state 54
    ID              shift and go to state 49

    additive_expression            shift and go to state 87
    term                           shift and go to state 51
    factor                         shift and go to state 52
    var                            shift and go to state 88
    call                           shift and go to state 53

state 66

    (49) additive_expression -> additive_expression addop . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (61) call -> . ID ( args )

    (               shift and go to state 44
    NUM             shift and go to state 54
    ID              shift and go to state 49

    term                           shift and go to state 89
    factor                         shift and go to state 52
    var                            shift and go to state 88
    call                           shift and go to state 53

state 67

    (43) relop -> LE .

    (               reduce using rule 43 (relop -> LE .)
    NUM             reduce using rule 43 (relop -> LE .)
    ID              reduce using rule 43 (relop -> LE .)


state 68

    (44) relop -> < .

    (               reduce using rule 44 (relop -> < .)
    NUM             reduce using rule 44 (relop -> < .)
    ID              reduce using rule 44 (relop -> < .)


state 69

    (45) relop -> > .

    (               reduce using rule 45 (relop -> > .)
    NUM             reduce using rule 45 (relop -> > .)
    ID              reduce using rule 45 (relop -> > .)


state 70

    (46) relop -> GE .

    (               reduce using rule 46 (relop -> GE .)
    NUM             reduce using rule 46 (relop -> GE .)
    ID              reduce using rule 46 (relop -> GE .)


state 71

    (47) relop -> EE .

    (               reduce using rule 47 (relop -> EE .)
    NUM             reduce using rule 47 (relop -> EE .)
    ID              reduce using rule 47 (relop -> EE .)


state 72

    (48) relop -> NE .

    (               reduce using rule 48 (relop -> NE .)
    NUM             reduce using rule 48 (relop -> NE .)
    ID              reduce using rule 48 (relop -> NE .)


state 73

    (51) addop -> + .

    (               reduce using rule 51 (addop -> + .)
    NUM             reduce using rule 51 (addop -> + .)
    ID              reduce using rule 51 (addop -> + .)


state 74

    (52) addop -> - .

    (               reduce using rule 52 (addop -> - .)
    NUM             reduce using rule 52 (addop -> - .)
    ID              reduce using rule 52 (addop -> - .)


state 75

    (53) term -> term mulop . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (61) call -> . ID ( args )

    (               shift and go to state 44
    NUM             shift and go to state 54
    ID              shift and go to state 49

    factor                         shift and go to state 90
    var                            shift and go to state 88
    call                           shift and go to state 53

state 76

    (55) mulop -> * .

    (               reduce using rule 55 (mulop -> * .)
    NUM             reduce using rule 55 (mulop -> * .)
    ID              reduce using rule 55 (mulop -> * .)


state 77

    (56) mulop -> / .

    (               reduce using rule 56 (mulop -> / .)
    NUM             reduce using rule 56 (mulop -> / .)
    ID              reduce using rule 56 (mulop -> / .)


state 78

    (30) selection_stmt -> IF ( expression . ) M statement N
    (31) selection_stmt -> IF ( expression . ) M statement N ELSE M statement M

    )               shift and go to state 91


state 79

    (57) factor -> ( expression ) .

    *               reduce using rule 57 (factor -> ( expression ) .)
    /               reduce using rule 57 (factor -> ( expression ) .)
    LE              reduce using rule 57 (factor -> ( expression ) .)
    <               reduce using rule 57 (factor -> ( expression ) .)
    >               reduce using rule 57 (factor -> ( expression ) .)
    GE              reduce using rule 57 (factor -> ( expression ) .)
    EE              reduce using rule 57 (factor -> ( expression ) .)
    NE              reduce using rule 57 (factor -> ( expression ) .)
    +               reduce using rule 57 (factor -> ( expression ) .)
    -               reduce using rule 57 (factor -> ( expression ) .)
    ;               reduce using rule 57 (factor -> ( expression ) .)
    )               reduce using rule 57 (factor -> ( expression ) .)
    ]               reduce using rule 57 (factor -> ( expression ) .)
    ,               reduce using rule 57 (factor -> ( expression ) .)


state 80

    (34) iteration_stmt -> WHILE M ( . expression ) M statement M
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 92
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 81

    (36) return_stmt -> RETURN expression ; .

    }               reduce using rule 36 (return_stmt -> RETURN expression ; .)
    ;               reduce using rule 36 (return_stmt -> RETURN expression ; .)
    {               reduce using rule 36 (return_stmt -> RETURN expression ; .)
    IF              reduce using rule 36 (return_stmt -> RETURN expression ; .)
    WHILE           reduce using rule 36 (return_stmt -> RETURN expression ; .)
    RETURN          reduce using rule 36 (return_stmt -> RETURN expression ; .)
    ID              reduce using rule 36 (return_stmt -> RETURN expression ; .)
    (               reduce using rule 36 (return_stmt -> RETURN expression ; .)
    NUM             reduce using rule 36 (return_stmt -> RETURN expression ; .)
    ELSE            reduce using rule 36 (return_stmt -> RETURN expression ; .)


state 82

    (37) expression -> var = expression .

    ;               reduce using rule 37 (expression -> var = expression .)
    )               reduce using rule 37 (expression -> var = expression .)
    ]               reduce using rule 37 (expression -> var = expression .)
    ,               reduce using rule 37 (expression -> var = expression .)


state 83

    (40) var -> ID [ expression . ]

    ]               shift and go to state 93


state 84

    (61) call -> ID ( args . )

    )               shift and go to state 94


state 85

    (62) args -> arg_list .
    (64) arg_list -> arg_list . , expression

    )               reduce using rule 62 (args -> arg_list .)
    ,               shift and go to state 95


state 86

    (65) arg_list -> expression .

    ,               reduce using rule 65 (arg_list -> expression .)
    )               reduce using rule 65 (arg_list -> expression .)


state 87

    (41) simple_expression -> additive_expression relop additive_expression .
    (49) additive_expression -> additive_expression . addop term
    (51) addop -> . +
    (52) addop -> . -

    ;               reduce using rule 41 (simple_expression -> additive_expression relop additive_expression .)
    )               reduce using rule 41 (simple_expression -> additive_expression relop additive_expression .)
    ]               reduce using rule 41 (simple_expression -> additive_expression relop additive_expression .)
    ,               reduce using rule 41 (simple_expression -> additive_expression relop additive_expression .)
    +               shift and go to state 73
    -               shift and go to state 74

    addop                          shift and go to state 66

state 88

    (58) factor -> var .

    *               reduce using rule 58 (factor -> var .)
    /               reduce using rule 58 (factor -> var .)
    +               reduce using rule 58 (factor -> var .)
    -               reduce using rule 58 (factor -> var .)
    ;               reduce using rule 58 (factor -> var .)
    )               reduce using rule 58 (factor -> var .)
    ]               reduce using rule 58 (factor -> var .)
    ,               reduce using rule 58 (factor -> var .)
    LE              reduce using rule 58 (factor -> var .)
    <               reduce using rule 58 (factor -> var .)
    >               reduce using rule 58 (factor -> var .)
    GE              reduce using rule 58 (factor -> var .)
    EE              reduce using rule 58 (factor -> var .)
    NE              reduce using rule 58 (factor -> var .)


state 89

    (49) additive_expression -> additive_expression addop term .
    (53) term -> term . mulop factor
    (55) mulop -> . *
    (56) mulop -> . /

    LE              reduce using rule 49 (additive_expression -> additive_expression addop term .)
    <               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    >               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    GE              reduce using rule 49 (additive_expression -> additive_expression addop term .)
    EE              reduce using rule 49 (additive_expression -> additive_expression addop term .)
    NE              reduce using rule 49 (additive_expression -> additive_expression addop term .)
    +               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    -               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    ;               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    )               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    ]               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    ,               reduce using rule 49 (additive_expression -> additive_expression addop term .)
    *               shift and go to state 76
    /               shift and go to state 77

    mulop                          shift and go to state 75

state 90

    (53) term -> term mulop factor .

    *               reduce using rule 53 (term -> term mulop factor .)
    /               reduce using rule 53 (term -> term mulop factor .)
    LE              reduce using rule 53 (term -> term mulop factor .)
    <               reduce using rule 53 (term -> term mulop factor .)
    >               reduce using rule 53 (term -> term mulop factor .)
    GE              reduce using rule 53 (term -> term mulop factor .)
    EE              reduce using rule 53 (term -> term mulop factor .)
    NE              reduce using rule 53 (term -> term mulop factor .)
    +               reduce using rule 53 (term -> term mulop factor .)
    -               reduce using rule 53 (term -> term mulop factor .)
    ;               reduce using rule 53 (term -> term mulop factor .)
    )               reduce using rule 53 (term -> term mulop factor .)
    ]               reduce using rule 53 (term -> term mulop factor .)
    ,               reduce using rule 53 (term -> term mulop factor .)


state 91

    (30) selection_stmt -> IF ( expression ) . M statement N
    (31) selection_stmt -> IF ( expression ) . M statement N ELSE M statement M
    (32) M -> .

    ;               reduce using rule 32 (M -> .)
    {               reduce using rule 32 (M -> .)
    IF              reduce using rule 32 (M -> .)
    WHILE           reduce using rule 32 (M -> .)
    RETURN          reduce using rule 32 (M -> .)
    ID              reduce using rule 32 (M -> .)
    (               reduce using rule 32 (M -> .)
    NUM             reduce using rule 32 (M -> .)

    M                              shift and go to state 96

state 92

    (34) iteration_stmt -> WHILE M ( expression . ) M statement M

    )               shift and go to state 97


state 93

    (40) var -> ID [ expression ] .

    =               reduce using rule 40 (var -> ID [ expression ] .)
    *               reduce using rule 40 (var -> ID [ expression ] .)
    /               reduce using rule 40 (var -> ID [ expression ] .)
    LE              reduce using rule 40 (var -> ID [ expression ] .)
    <               reduce using rule 40 (var -> ID [ expression ] .)
    >               reduce using rule 40 (var -> ID [ expression ] .)
    GE              reduce using rule 40 (var -> ID [ expression ] .)
    EE              reduce using rule 40 (var -> ID [ expression ] .)
    NE              reduce using rule 40 (var -> ID [ expression ] .)
    +               reduce using rule 40 (var -> ID [ expression ] .)
    -               reduce using rule 40 (var -> ID [ expression ] .)
    ;               reduce using rule 40 (var -> ID [ expression ] .)
    )               reduce using rule 40 (var -> ID [ expression ] .)
    ]               reduce using rule 40 (var -> ID [ expression ] .)
    ,               reduce using rule 40 (var -> ID [ expression ] .)


state 94

    (61) call -> ID ( args ) .

    *               reduce using rule 61 (call -> ID ( args ) .)
    /               reduce using rule 61 (call -> ID ( args ) .)
    LE              reduce using rule 61 (call -> ID ( args ) .)
    <               reduce using rule 61 (call -> ID ( args ) .)
    >               reduce using rule 61 (call -> ID ( args ) .)
    GE              reduce using rule 61 (call -> ID ( args ) .)
    EE              reduce using rule 61 (call -> ID ( args ) .)
    NE              reduce using rule 61 (call -> ID ( args ) .)
    +               reduce using rule 61 (call -> ID ( args ) .)
    -               reduce using rule 61 (call -> ID ( args ) .)
    ;               reduce using rule 61 (call -> ID ( args ) .)
    )               reduce using rule 61 (call -> ID ( args ) .)
    ]               reduce using rule 61 (call -> ID ( args ) .)
    ,               reduce using rule 61 (call -> ID ( args ) .)


state 95

    (64) arg_list -> arg_list , . expression
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 98
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 96

    (30) selection_stmt -> IF ( expression ) M . statement N
    (31) selection_stmt -> IF ( expression ) M . statement N ELSE M statement M
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression ;
    (29) expression_stmt -> . ;
    (18) compound_stmt -> . { local_declarations statement_list }
    (30) selection_stmt -> . IF ( expression ) M statement N
    (31) selection_stmt -> . IF ( expression ) M statement N ELSE M statement M
    (34) iteration_stmt -> . WHILE M ( expression ) M statement M
    (35) return_stmt -> . RETURN ;
    (36) return_stmt -> . RETURN expression ;
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ;               shift and go to state 42
    {               shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 46
    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 41
    statement                      shift and go to state 99
    expression_stmt                shift and go to state 36
    compound_stmt                  shift and go to state 37
    selection_stmt                 shift and go to state 38
    iteration_stmt                 shift and go to state 39
    return_stmt                    shift and go to state 40
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 97

    (34) iteration_stmt -> WHILE M ( expression ) . M statement M
    (32) M -> .

    ;               reduce using rule 32 (M -> .)
    {               reduce using rule 32 (M -> .)
    IF              reduce using rule 32 (M -> .)
    WHILE           reduce using rule 32 (M -> .)
    RETURN          reduce using rule 32 (M -> .)
    ID              reduce using rule 32 (M -> .)
    (               reduce using rule 32 (M -> .)
    NUM             reduce using rule 32 (M -> .)

    M                              shift and go to state 100

state 98

    (64) arg_list -> arg_list , expression .

    ,               reduce using rule 64 (arg_list -> arg_list , expression .)
    )               reduce using rule 64 (arg_list -> arg_list , expression .)


state 99

    (30) selection_stmt -> IF ( expression ) M statement . N
    (31) selection_stmt -> IF ( expression ) M statement . N ELSE M statement M
    (33) N -> .

    ELSE            reduce using rule 33 (N -> .)
    }               reduce using rule 33 (N -> .)
    ;               reduce using rule 33 (N -> .)
    {               reduce using rule 33 (N -> .)
    IF              reduce using rule 33 (N -> .)
    WHILE           reduce using rule 33 (N -> .)
    RETURN          reduce using rule 33 (N -> .)
    ID              reduce using rule 33 (N -> .)
    (               reduce using rule 33 (N -> .)
    NUM             reduce using rule 33 (N -> .)

    N                              shift and go to state 101

state 100

    (34) iteration_stmt -> WHILE M ( expression ) M . statement M
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression ;
    (29) expression_stmt -> . ;
    (18) compound_stmt -> . { local_declarations statement_list }
    (30) selection_stmt -> . IF ( expression ) M statement N
    (31) selection_stmt -> . IF ( expression ) M statement N ELSE M statement M
    (34) iteration_stmt -> . WHILE M ( expression ) M statement M
    (35) return_stmt -> . RETURN ;
    (36) return_stmt -> . RETURN expression ;
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ;               shift and go to state 42
    {               shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 46
    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 41
    statement                      shift and go to state 102
    expression_stmt                shift and go to state 36
    compound_stmt                  shift and go to state 37
    selection_stmt                 shift and go to state 38
    iteration_stmt                 shift and go to state 39
    return_stmt                    shift and go to state 40
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 101

    (30) selection_stmt -> IF ( expression ) M statement N .
    (31) selection_stmt -> IF ( expression ) M statement N . ELSE M statement M

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    ;               reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    {               reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    IF              reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    WHILE           reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    RETURN          reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    ID              reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    (               reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    NUM             reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .)
    ELSE            shift and go to state 103

  ! ELSE            [ reduce using rule 30 (selection_stmt -> IF ( expression ) M statement N .) ]


state 102

    (34) iteration_stmt -> WHILE M ( expression ) M statement . M
    (32) M -> .

    }               reduce using rule 32 (M -> .)
    ;               reduce using rule 32 (M -> .)
    {               reduce using rule 32 (M -> .)
    IF              reduce using rule 32 (M -> .)
    WHILE           reduce using rule 32 (M -> .)
    RETURN          reduce using rule 32 (M -> .)
    ID              reduce using rule 32 (M -> .)
    (               reduce using rule 32 (M -> .)
    NUM             reduce using rule 32 (M -> .)
    ELSE            reduce using rule 32 (M -> .)

    M                              shift and go to state 104

state 103

    (31) selection_stmt -> IF ( expression ) M statement N ELSE . M statement M
    (32) M -> .

    ;               reduce using rule 32 (M -> .)
    {               reduce using rule 32 (M -> .)
    IF              reduce using rule 32 (M -> .)
    WHILE           reduce using rule 32 (M -> .)
    RETURN          reduce using rule 32 (M -> .)
    ID              reduce using rule 32 (M -> .)
    (               reduce using rule 32 (M -> .)
    NUM             reduce using rule 32 (M -> .)

    M                              shift and go to state 105

state 104

    (34) iteration_stmt -> WHILE M ( expression ) M statement M .

    }               reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    ;               reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    {               reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    IF              reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    WHILE           reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    RETURN          reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    ID              reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    (               reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    NUM             reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)
    ELSE            reduce using rule 34 (iteration_stmt -> WHILE M ( expression ) M statement M .)


state 105

    (31) selection_stmt -> IF ( expression ) M statement N ELSE M . statement M
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression ;
    (29) expression_stmt -> . ;
    (18) compound_stmt -> . { local_declarations statement_list }
    (30) selection_stmt -> . IF ( expression ) M statement N
    (31) selection_stmt -> . IF ( expression ) M statement N ELSE M statement M
    (34) iteration_stmt -> . WHILE M ( expression ) M statement M
    (35) return_stmt -> . RETURN ;
    (36) return_stmt -> . RETURN expression ;
    (37) expression -> . var = expression
    (38) expression -> . simple_expression
    (39) var -> . ID
    (40) var -> . ID [ expression ]
    (41) simple_expression -> . additive_expression relop additive_expression
    (42) simple_expression -> . additive_expression
    (49) additive_expression -> . additive_expression addop term
    (50) additive_expression -> . term
    (53) term -> . term mulop factor
    (54) term -> . factor
    (57) factor -> . ( expression )
    (58) factor -> . var
    (59) factor -> . call
    (60) factor -> . NUM
    (61) call -> . ID ( args )

    ;               shift and go to state 42
    {               shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 46
    ID              shift and go to state 49
    (               shift and go to state 44
    NUM             shift and go to state 54

    expression                     shift and go to state 41
    statement                      shift and go to state 106
    expression_stmt                shift and go to state 36
    compound_stmt                  shift and go to state 37
    selection_stmt                 shift and go to state 38
    iteration_stmt                 shift and go to state 39
    return_stmt                    shift and go to state 40
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 50
    term                           shift and go to state 51
    factor                         shift and go to state 52
    call                           shift and go to state 53

state 106

    (31) selection_stmt -> IF ( expression ) M statement N ELSE M statement . M
    (32) M -> .

    }               reduce using rule 32 (M -> .)
    ;               reduce using rule 32 (M -> .)
    {               reduce using rule 32 (M -> .)
    IF              reduce using rule 32 (M -> .)
    WHILE           reduce using rule 32 (M -> .)
    RETURN          reduce using rule 32 (M -> .)
    ID              reduce using rule 32 (M -> .)
    (               reduce using rule 32 (M -> .)
    NUM             reduce using rule 32 (M -> .)
    ELSE            reduce using rule 32 (M -> .)

    M                              shift and go to state 107

state 107

    (31) selection_stmt -> IF ( expression ) M statement N ELSE M statement M .

    }               reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    ;               reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    {               reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    IF              reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    WHILE           reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    RETURN          reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    ID              reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    (               reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    NUM             reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)
    ELSE            reduce using rule 31 (selection_stmt -> IF ( expression ) M statement N ELSE M statement M .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 101 resolved as shift
